# -*- coding: utf-8 -*-
"""house price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HpFC6Jm1wraO9odx7YuEAXDzdyPF34UE

**Importing libraries**
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as  sns
import sklearn.datasets
from xgboost import XGBRegressor

"""**Importing dataset**"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

#converting this into pandas dataframe for creating a structured array
house_price_dataframe = pd.DataFrame(house_price_dataset.data,columns=house_price_dataset.feature_names )

house_price_dataframe['price'] = house_price_dataset.target

print(house_price_dataframe.head())

#checking the rows and collumn in dataframe
house_price_dataframe.shape

"""**cheching correlation between data**

1.Positive Correlation
2. Negative Correation 
"""

#finding correlation first
correlation = house_price_dataframe.corr()
#plotting figure
plt.figure(figsize = (10,10))
sns.heatmap(correlation, cbar= True,square=True, fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""**splitnig it into X and Y**"""

X = house_price_dataframe.drop(['price'], axis = 1)
y = house_price_dataframe['price']

print(X)

print(y)



"""**split into training and test data**"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 2)

print(X.shape,x_train.shape,x_test.shape)

"""**Model Training by XGBoost Regressor**"""

model = XGBRegressor()
model.fit(x_train,y_train)

"""**Evaluation**

prediction on training data
"""

y_pred = model.predict(x_test)

#accuracy_score using r square error method and mean absolute error

#r squared error 
from sklearn import metrics
score_1 = metrics.r2_score(y_test,y_pred)
print(score_1)

# mean absolute error

score_2 = metrics.mean_absolute_error(y_test,y_pred)
print(score_2)

x_pred = model.predict(x_train)

#accuracy_score using r square error method and mean absolute error

#r squared error 
from sklearn import metrics
score_3 = metrics.r2_score(y_train,x_pred)
print(score_3)

# mean absolute error

score_4 = metrics.mean_absolute_error(y_train,x_pred)
print(score_4)

"""**Visualize predicted price vs actual price**"""

plt.scatter(y_test,y_pred)
plt.xlabel("actual price")
plt.ylabel('predicted price')
plt.title('Visualize predicted price vs actual price')
plt.show()